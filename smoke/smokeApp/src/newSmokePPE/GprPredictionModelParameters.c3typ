/**
* Copyright (c) 2022-2024, C3 AI DTI, Development Operations Team
* All rights reserved. License: https://github.com/c3aidti/.github
**/
@db(unique=["kernelName,kernelHyperparametersHash,featureListHash,randomState,centerTarget,validation,randomSeed,splitFraction"])
entity type GprPredictionModelParameters mixes MLTechnique schema name "GPR_PRD_MDL_PRMS" {
    //
    model: !SimulationModel
    // the name of the kernel.  Must correspod t oclass names in sklearn.gaussian_process.kernels module
    @ML(hyperParameter=true)
    kernelName: !string enum('ConstantKernel', 'DotProduct', 'ExpSineSquared', 'Matern', 'RBF', 'RationalQuadratic', 'WhiteKernel')
    //
    @ML(hyperParameter=true)
    serializedKernelHyperparameters: private !string
    //
    @ML(hyperParameter=true)
    serializedFeatureList: private !string
    //
    @ML(hyperParameter=true)
    serializedSimulationList: [integer]
    //
    @ML(hyperParameter=true)
    targetName: !string
    // random seed
    @ML(hyperParameter=true)
    randomState: integer
    // center target data before fitting
    @ML(hyperParameter=true)
    centerTarget: boolean=false
    // leave fraction of rows for post-validation
    @ML(hyperParameter=true)
    validation: boolean=false
    // random seed to be used by numpy.shuffle
    @ML(hyperParameter=true)
    randomSeed: integer=42
    // fraction to be left for validation
    @ML(hyperParameter=true)
    splitFraction: float=0.2
    /**
    Method to create a new instance of this type.
    */
    createTechnique: function(kernelName: string, kernelHyperparameters: json, featureList: [string], simulationList: [any], targetName: string, randomState: integer, centerTarget: boolean, validation: boolean, randomSeed: integer, splitFraction: float): GprPredictionModelParameters py server
     /**
    Get the serialized kernel Hyperparameters
    */
    @py(env='gordon_1_0_0')
    getSerializedKernelHyperparameters: inline member function(): string
    /**
    */
    @py(env='gordon_1_0_0')
    getFeatureList: inline member function(): [string]
    /**
    */
    @py(env='gordon_1_0_0')
    getSimulationList: inline member function(): [integer]
    /**
    Get the kernel object
    */
    @py(env='gordon_1_0_0')
    getKernel: inline member function(): any
   
}